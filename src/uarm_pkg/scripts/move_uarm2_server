#!/usr/bin/env python
import rospy
from robis_messages.msg import MoveAction, MoveGoal, GraspAction, GraspGoal
from group_messages.srv import order_cubes
import actionlib

def handle_move_uarm2(order):
    rospy.loginfo("I heard %s", order.storage1)
    print("data: " + str(order.storage1) + " " + str(order.storage2) + " " + str(order.storage3))

    storage = [order.storage1, order.storage2, order.storage3]
    for cube in range(3):
        if storage[cube]:
            continue
        else:
            # move uarm to turtelbot and take the stone and put it on the conveyor
            pass
    return True


    """
    # create ROS action client:
    move_client = actionlib.SimpleActionClient('uarm2/move', MoveAction)
    grip_client = actionlib.SimpleActionClient('uarm2/grip', GraspAction)
    print("connecting")
    # Waits until the action server has started up and started
    # listening for goals.        
    move_client.wait_for_server()
    print("connected")

    # Creates a goal to send to the action server.
    goal = MoveGoal(target="")
    print("goal defined")

    # Sends the goal to the action server.
    move_client.send_goal(goal)
    print("goal sent")

    # Waits for the server to finish performing the action.
    move_client.wait_for_result()

    # or shorter alternative to three commands above:
    # move_client.send_goal_and_wait(MoveGoal(target=[x, y, z, w]))

    # gets the result of the task
    return move_client.get_result() """



if __name__ == '__main__':
    # Starts a new node
    rospy.init_node('handle_uarm2_server')
    # create new Service server
    rospy.loginfo("I heard ")
    s = rospy.Service('uarm2_controll/move', order_cubes, handle_move_uarm2)
    rospy.spin()