#!/usr/bin/env python3
import rospy
import tf
from geometry_msgs.msg import Twist, Point, Pose, Quaternion
from nav_msgs.msg import Odometry


def odom_callback(odom: Odometry):
    # quarternion = [odom.pose.pose.orientation.x,odom.pose.pose.orientation.y,\
    #             odom.pose.pose.orientation.z, odom.pose.pose.orientation.w]
    #(roll, pitch, yaw) = tf.transformations.euler_from_quaternion(quarternion)
    #self.pose.theta = yaw
    #self.pose.x = odom.pose.pose.position.x
    #self.pose.y = odom.pose.pose.position.y
    #self.theta.z = odom.pose.pose.orientation.z
    #self.theta.w = odom.pose.pose.orientation.w

    cmd = Twist()
    if odom.pose.pose.position.x > 1.15 and odom.pose.pose.position.x < 1.3:
        rospy.loginfo("First condition achieved.")
        cmd.linear.x = 0.22
        cmd.angular.z = 0.0
    elif odom.pose.pose.position.x > 1.0 and odom.pose.pose.position.x < 1.16 and odom.pose.pose.orientation.z < -0.745:
        rospy.loginfo("Second condition achieved.")
        cmd.linear.x = 0.0
        cmd.angular.z = 1.5
    elif odom.pose.pose.orientation.z < 1.0 and odom.pose.pose.orientation.z > -0.73 and odom.pose.pose.orientation.w < 0.69:
        rospy.loginfo("Third condition achieved.")
        cmd.linear.x = 0.0
        cmd.angular.z = 0.0
    elif odom.pose.pose.position.y > 0.5 and odom.pose.pose.position.y < 0.8:
        rospy.loginfo("Fourth condition achieved.")
        cmd.linear.x = 0.22
        cmd.angular.z = 0.0
    elif odom.pose.pose.position.y > 0.4 and odom.pose.pose.position.y < 0.51 and odom.pose.pose.orientation.z < -0.07:
        rospy.loginfo("Fifth condition achieved.")
        cmd.linear.x = 0.0
        cmd.angular.z = 1.5
    elif odom.pose.pose.orientation.z < 0.07 and odom.pose.pose.orientation.z > -0.071 and odom.pose.pose.orientation.w > 0.99 and odom.pose.pose.position.x > 0.5:
        rospy.loginfo("Sixth condition achieved.")
        cmd.linear.x = -0.22
        cmd.angular.z = 0.0
    else:
        rospy.loginfo("STOP.")
        cmd.linear.x = 0.0
        cmd.angular.z = 0.0

    pub.publish(cmd)


if __name__ == '__main__':
    rospy.init_node("turtlebot_controller")
    pub = rospy.Publisher("/turtlebot1/cmd_vel", Twist, queue_size=10)
    sub = rospy.Subscriber("/turtlebot1/odom", Odometry,
                           callback=odom_callback)
    rospy.loginfo("Node has been started.")

    rospy.spin()
